/** AS-MOSESUTest.cxxtest ---
 *
 * Copyright (C) 2018 OpenCog Foundation
 *
 * Author: Behailu Dereje <Behailu04@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <moses/moses/main/moses_exec.h>
#include <opencog/util/Logger.h>
#include <boost/current_function.hpp>
#include "moses-framework.h"

using namespace opencog::moses;

const string MOSESUTest_dir = string(PROJECT_SOURCE_DIR) + "/tests/moses/main/";

/**
 * MOSES test on toy problems
 */
class MOSESUTest : public CxxTest::TestSuite
{
public:
    MOSESUTest() {
        opencog::logger().set_print_to_stdout_flag(true);
    }

    void test_2_parity() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k2", "--atomspace_port=1"});
    }
    void test_2_parity_with_labels() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k2", "-W1", "--atomspace_port=1"});
    }
    void test_3_parity_multi_thread() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k3", "-m100000", "-j4", "--atomspace_port=1"});
    }
    void test_4_parity_boosting() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k4", "--boost=1", "--atomspace_port=1"});
    }
    void test_5_parity_boosting() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k5", "--boost=1", "-m40000", "--atomspace_port=1"});
    }
    void test_1_mux() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hmux", "-k1", "--atomspace_port=1"});
    }
    void test_2_mux() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hmux", "-k2", "--atomspace_port=1"});
    }
    void test_sa_2_parity() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k2", "-asa", "--atomspace_port=1"});
    }
    void test_ps_2_parity() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hpa", "-k2", "-aps", "--atomspace_port=1"});
    }
    void test_sa_1_mux() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hmux", "-k1", "-asa", "--atomspace_port=1"});
    }
    void test_un_3_pa_multi_thread() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-r3", "-Hpa", "-k3", "-aun", "-m500000", "-j4", "-c3000", "--atomspace_port=1"});
    }

    void test_it() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string data_file_path("-i" + MOSESUTest_dir + "dataset.csv");
        string max_evals("-m1000");
        moses_test_score({data_file_path, max_evals}, -3);
    }
    void test_it_target_ignore() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        // try to predict arg1 given arg2
        string data_file_path("-i" + MOSESUTest_dir + "dataset.csv"),
            max_evals("-m1000"), target("-uarg2"), ignore_feature("-Yres"), "--atomspace_port=1";
        moses_test_score({data_file_path, max_evals, target, ignore_feature},
                         -3);
    }
    void test_sr_3() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score({"-Hsr", "-k3", "-m100000", "-L1", "--atomspace_port=1"});
    }
};
