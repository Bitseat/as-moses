/** MOSES_in_atomeseUTest.cxxtest ---
 *
 * Copyright (C) 2011 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@desktop>
           Bitseat Tadesse <bitseatt@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 #include <cxxtest/TestSuite.h>
#include <moses/moses/main/moses_exec.h>
#include <opencog/util/Logger.h>
#include <boost/current_function.hpp>
#include "moses-framework.h"
 using namespace opencog::moses;
 const string MOSESUTest_dir = string(PROJECT_SOURCE_DIR) + "/tests/moses/main/";
 /**
 * MOSES test on atomese toy problems
 */
class MOSES_in_atomeseUTest : public CxxTest::TestSuite
{
public:
    MOSES_in_atomeseUTest() {
        opencog::logger().set_print_to_stdout_flag(true);
        // to control the log level use option -l
    }
     void test_2_parity() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hpa", "-k2", "--atomspace-store=1"});
    }
    void test_2_parity_with_labels() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hpa", "-k2", "-W1", "--atomspace-store=1"});
    }
    void test_3_parity_multi_thread() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hpa", "-k3", "-m100000", "-j4", "--atomspace-store=1"});
    }
    void test_4_parity_boosting() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        // Without boosting, this takes many minutes. With boosting,
        // it should be less than 2 seconds, and about 5K evaluations.
        moses_test_score_atomese({"-Hpa", "-k4", "--boost=1", "--atomspace-store=1"});
    }
    void test_5_parity_boosting() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        // Without boosting, this takes many hours. With boosting,
        // it should be less than 12 seconds (on a circa-2009 commodity CPU)
        // This should take about 18K or 20K evaluations.
        moses_test_score_atomese({"-Hpa", "-k5", "--boost=1", "-m40000", "--atomspace-store=1"});
    }
    void test_1_mux() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hmux", "-k1", "--atomspace-store=1"});
    }
    void test_2_mux() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hmux", "-k2", "--atomspace-store=1"});
    }
    void test_sa_2_parity() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hpa", "-k2", "-asa", "--atomspace-store=1"});
    }
    void test_ps_2_parity() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hpa", "-k2", "-aps", "--atomspace-store=1"});
    }
    void test_sa_1_mux() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hmux", "-k1", "-asa", "--atomspace-store=1"});
    }
    void test_un_3_pa_multi_thread() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-r3", "-Hpa", "-k3", "-aun", "-m500000", "-j4", "-c3000", "--atomspace-store=1"});
    }
     /* SR is polynomial regression; it has a very deceptive scoring
     * function, and hill-climbing will utterly fail on it. Use the
     * -L1 flag to perform an exhaustive local search.
     */
    void test_sr_3() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        moses_test_score_atomese({"-Hsr", "-k3", "-m100000", "-L1"});
    }

    void test_cp_simple() {
        cout << BOOST_CURRENT_FUNCTION << endl;

        // Sniff test, make sure -Hcp is at least minimally working.
        string tr_str("and($1 $2)");
        string cp_opt("-y");
        moses_test_atomese({"-Hcp", cp_opt + tr_str, "--atomspace-store=1"}, {tr_str});
    }

    void test_cp() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr_str("or(and($2 !$3) $1 !$4 $5)");
        string cp_opt("-y");
        // Note: This test is very sensitive to algorithmic details;
        // examples of perfect score solutions are:
        // or(and(or(!$3 $4) $1) and($2 !$3) !$4 $5)
        // or(and(or(and($4 $5) $2 $3) $1) and(or($1 $2) !$3) !$4 $5)
        // or(and(or(!$2 $4) $1) and($2 !$3) !$4 $5)
        // or(and(or($1 $2) !$3) and(or(!$2 $4 !$5) $1) !$4 $5)
        // ... and many many more.  Need the -E3 flag to shrink it down.
        moses_test_atomese({"-Hcp", cp_opt + tr_str, "-E3", "--atomspace-store=1"}, {tr_str});
    }

    void test_cp_contin() {
        cout << BOOST_CURRENT_FUNCTION << endl;

        // This one is challenging because if min, max_rand_input aren't
        // set correctly, then the scoring table will be on too small a
        // range, and moses will fail to find a solution.
        string tr_str("+(6 *(6 $1))");
        string cp_opt("-y");
        moses_test_atomese({"-Hcp", cp_opt + tr_str, "-nexp", "--atomspace-store=1"},
                         {tr_str, "*(6 +(1 $1))"});
    }

    void test_kl() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr1_str("or(and(!$1 $2) and($1 !$2))");
        string tr2_str("and(or(!$1 !$2) or($1 $2))");
        string data_file_path("-i" + MOSESUTest_dir + "KL_test.csv");
        moses_test_atomese({"-Hip", data_file_path, "-m500", "-l debug",
                          "-U0", "-X0", "-z100000",
                          "-q0.2", "-w0.8", "--atomspace-store=1"},
                         {tr1_str, tr2_str});
    }
    void test_multi_kl() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr1_str("or(and(!$1 $2) and($1 !$2))");
        string tr2_str("and(or(!$1 !$2) or($1 $2))");
        string data_file_path("-i" + MOSESUTest_dir + "KL_test.csv");
        moses_test_atomese({"-Hip", data_file_path,  data_file_path,
                          "-m500", "-l debug", "-U0", "-X0",
                          "-z100000",
                          "-q0.2", "-w0.8", "--atomspace-store=1"},
                          {tr1_str, tr2_str});
    }

    void test_precision() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr_str("$2");
        string data_file_path("-i" + MOSESUTest_dir + "precision.csv");
        moses_test_atomese({"-Hpre", data_file_path,  "-m100", "-q0.2", "-w0.5", "-Q1", "-z10000", "--atomspace-store=1"}, {tr_str});
    }
    void test_negative_predictive_value() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr_str("$1");
        string data_file_path("-i" + MOSESUTest_dir + "precision.csv");
        moses_test_atomese({"-Hpre", data_file_path, "-m100", "-q0.2", "-w0.5", "-Q1", "--pre-positive=0", "-z10000", "--atomspace-store=1"}, {tr_str});
    }

    void test_output_labels() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr_str("and($arg1 $arg2)"),
            data_file_path("-i" + MOSESUTest_dir + "dataset.csv"),
            max_evals("-m1000"),
            output_labels("-W1");
        cheap_moses_test_atomese({data_file_path, max_evals, output_labels, "--atomspace-store=1"},
                               {tr_str});
    }

    void test_python_output() {
        cout << BOOST_CURRENT_FUNCTION << endl;
        string tr_str("and($arg1 $arg2)"),
            data_file_path("-i" + MOSESUTest_dir + "dataset.csv"),
            max_evals("-m1000"),
            output_labels("-W1");
        cheap_moses_test_atomese({data_file_path, max_evals, output_labels, "--atomspace-store=1"},
                               {tr_str});
    }
};